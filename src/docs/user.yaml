components:
  schemas:
    User:
      type: object
      required:
        - email
        - name
        - password
      properties:
        id:
          type: string
          description: auto-generated id for user
        email:
          type: string
          description: unique email for each user
        name:
          type: string
          description: password of user
      example:
        id: 633355f1-4d6d-4ead-9566-57cceab87677
        email: jhonson@mail.com
        name: jhonson
        password: $2b$10$mmJhFftKrfKzhD7yk.5DBOzHpYRWkigHdEioZg2B.3X.1J2RCXvK2
  parameters:
    idParam:
      in: path
      name: id
      schema:
        type: string
      required: true
      description: The user id
  responses:
    400Error:
      description: An error occured
  requestBodies:
    createUserRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              email: 
                type: string
              name:
                type: string
              password:
                type: string
            example:
              email: jhonson@mail.com
              name: jhonson anderson
              password: jhonson1212

tags:
  name: User
  description: The user service API
  
paths:
  /user/all:
    get:
      summary: Return all users
      tags: [User]
      responses:
        200:
          description: Successfully obtained user
          content:
            application/json:
              schema:
                type: array
                $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/400Error'

  /user/{id}:
    get:
      summary: Return a user by id
      tags: [User]
      parameters:
      - $ref: '#/components/parameters/idParam'
      responses:
        200:
          description: Successfully obtained user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/400Error'
    put:
      summary: Update a user
      tags: [User]
      parameters:
        - $ref: '#/components/parameters/idParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: User successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/400Error'
    delete:
      summary: Delete a user
      tags: [User]
      parameters:
      - $ref: '#/components/parameters/idParam'
      responses:
        200:
          description: Successfully deleted user
        400:
          $ref: '#/components/responses/400Error'
  /user:
    post:
      summary: Create a user
      tags: [User]
      requestBody:
        $ref: '#/components/requestBodies/createUserRequestBody'
      responses:
        200:
          description: Successfully created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/400Error'


    